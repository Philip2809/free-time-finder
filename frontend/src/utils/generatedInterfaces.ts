// Generated by https://quicktype.io
// Thanks for that awesome project! // Philip

export interface EventsData {
  calendarDataRequest: CalendarDataRequest;
  messages:            any[];
  browseNextWeek:      boolean;
  browsePrevWeek:      boolean;
  availableTimeslots:  number;
  browsePrevMonth:     boolean;
  browseNextMonth:     boolean;
  items:               Item[];
  groups:              any[];
}

export interface CalendarDataRequest {
  nextWeek:                                      number;
  prevWeek:                                      number;
  formattedMonth:                                string;
  nextMonth:                                     string;
  prevMonth:                                     string;
  teacherIDs:                                    number[];
  start:                                         string;
  end:                                           string;
  educationTypeId:                               number;
  selectedView:                                  string;
  showInListView:                                boolean;
  includeRegistrationWarning:                    boolean;
  morePages:                                     boolean;
  person:                                        Person;
  commitLevel:                                   string;
  isExternalHalstraList:                         boolean;
  isProductNoResource:                           boolean;
  formattedMonthDateAndWeek:                     string;
  showOnlyPersonTimeslots:                       boolean;
  includeOnlyFilteredEducationTypeResourceTypes: string;
  includeTimeslotGroupTimeslotsMode:             string;
}

export interface Person {
  studentNumber: number;
  autoFilter:    boolean;
  archived:      string;
  isTutor:       boolean;
  id:            number;
}

export interface Item {
  isBookable:                          boolean;
  showInListView:                      boolean;
  examType:                            ExamType;
  isPersonBookable:                    boolean;
  isOld:                               boolean;
  ownReservationsCount:                number;
  ownPersonsCount:                     number;
  concurrencyToken:                    string;
  timeslotPersonStatus:                TimeslotPersonStatus;
  timeslotResourceTypeStatus:          TimeslotResourceTypeStatus;
  resourceBookingMode:                 ResourceBookingMode;
  maxPersonBookings:                   number;
  chargeable:                          boolean;
  studentCentral:                      boolean;
  homePage:                            boolean;
  description?:                        string;
  attendanceCheck:                     boolean;
  approvalCheck:                       boolean;
  isLocked:                            boolean;
  isTypeLocked:                        boolean;
  educationTypesResourceTypes:         EducationTypesResourceType[];
  persons:                             any[];
  employees:                           Employee[];
  resources:                           any[];
  watchlistPersons:                    any[];
  reservations:                        any[];
  className:                           ClassName[];
  attendancePresentCount:              number;
  highlight:                           boolean;
  log:                                 string[];
  isAttendanceApprovalReported:        boolean;
  uiResourceBookingMode:               number;
  formattedTitleDateAndTime:           string;
  selectedEducationTypeId:             number;
  colorBg:                             ColorBg;
  colorText:                           ColorText;
  week:                                number;
  missingRegistration:                 boolean;
  lateCancellationTime:                string;
  disabled:                            boolean;
  cancelBookingDisabled:               boolean;
  cancelBookingDisabledMessage:        string;
  availableSeats:                      number;
  availableSeatsPerResourceText:       string;
  availableInterpreters:               number;
  halstraOrgId:                        number;
  maxPersonInterpreters:               number;
  connectedReservations:               any[];
  currentPersonBookingAndReservations: number;
  openByDefault:                       boolean;
  markAsToDo:                          boolean;
  markedAsDone:                        boolean;
  personHasNegativeBalance:            boolean;
  timeslotId:                          number;
  start:                               string;
  end:                                 string;
  length:                              number;
  title:                               Title;
  action:                              Action;
  internalNotes?:                      string;
  externalNotes?:                      string;
  condition?:                          string;
}

export enum Action {
  None = "none",
}

export enum ClassName {
  HasEduCard = "hasEduCard",
  Selectable = "selectable",
}

export enum ColorBg {
  Ffc025 = "#FFC025",
}

export enum ColorText {
  The424242 = "#424242",
}

export interface EducationTypesResourceType {
  action:                       Action;
  selected:                     boolean;
  available:                    boolean;
  educationTypeClass:           EducationTypeClass;
  resourceTypeType:             ResourceTypeType;
  resourcesAllocated:           number;
  resourcesTotal:               number;
  resourcesFree:                number;
  resourceSeatsFree:            number;
  articleAmountIncVat:          string;
  ecommerceArticleAmountIncVat: string;
  articleLessons:               string;
  articleLessonTypeId:          number;
  articleLessonTypeName:        ArticleLessonTypeName;
  displayName:                  DisplayName;
  educationTypeId:              number;
  educationTypeName:            Name;
  resourceCategoryId:           number;
  resourceCategoryName:         Name;
  resourceTypeId:               number;
  resourceTypeName:             ResourceTypeName;
  articleId:                    number;
  articleNumber:                string;
  articleText:                  Title;
  resourceAllocationCount:      number;
  erTypeId:                     ErTypeID;
  ervcTypeId:                   ErvcTypeID;
}

export enum ArticleLessonTypeName {
  Körlektion = "Körlektion",
}

export enum Title {
  BLek80MinZ2 = "B Lek 80 min Z2",
}

export enum DisplayName {
  PersonbilManuell = "Personbil - Manuell",
}

export enum EducationTypeClass {
  B = "B",
}

export enum Name {
  Personbil = "Personbil",
}

export enum ErTypeID {
  The3_1 = "3_1",
}

export enum ErvcTypeID {
  The3_1__1 = "3_1__1",
}

export enum ResourceTypeName {
  Manuell = "Manuell",
}

export enum ResourceTypeType {
  Engine = "Engine",
}

export interface Employee {
  id:        number;
  name:      string;
  signature: string;
  imageUrl:  string;
  action:    Action;
  type:      Type;
}

export enum Type {
  Employee = "Employee",
}

export enum ExamType {
  NotExam = "NotExam",
}

export enum ResourceBookingMode {
  AutomaticPerTimeslot = "AutomaticPerTimeslot",
}

export enum TimeslotPersonStatus {
  FreeEmpty = "FreeEmpty",
}

export enum TimeslotResourceTypeStatus {
  Available = "Available",
}
